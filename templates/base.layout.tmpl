{{define "base"}}
<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <style>
        .my-footer {
            background-color: black;
            padding: 1em;
            margin-top: 2.5em;
            color: white;
            font-size: 100%;
        }
    </style>

    <title>Airbnb</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">Golden Obelisk</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            Rooms
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="/treehouses">Tree House</a></li>
                            <li><a class="dropdown-item" href="/studios">Studio</a></li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li><a class="dropdown-item" href="/hotels">Hotels</a></li>
                        </ul>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>

            </div>
        </div>
    </nav>
    {{block "content" .}}

    {{end}}




    <div class="row my-footer">

        <div class="col">
            Left
        </div>

        <div class="col">
            Middle
        </div>

        <div class="col">
            Right
        </div>

    </div>







    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



    <script>

        let attention = Prompt();

        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            let forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()





        function notify(msg, type) {
            notie.alert({
                type: type,
                text: msg,
                // stay: Boolean, // optional, default = false
                // time: Number, // optional, default = 3, minimum = 1,
                // position: String // optional, default = 'top', enum: ['top', 'bottom']
            })
        }

        function notifyModal(title, text, icon, confirmationText) {
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmButtonText: confirmationText
            })
        }

        function Prompt(c) {




            let toast = function (c) {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})

            }


            let success = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer,
                })
            }


            let error = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: msg,
                    footer: footer,
                })
            }


            async function custom(c) {

                const {
                    msg = "",
                    title = "",
                } = c;

                const { value: result } = await Swal.fire({
                    title: title,
                    html: msg,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () => {
                        if (c.willOpen !== undefined){
                            c.willOpen();
                        }
                    },
                    didOpen: () => {
                        if (c.didOpen !== undefined){
                            c.didOpen();
                        }
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById('start').value,
                            document.getElementById('end').value
                        ]
                    }
                })

                if (result) {
                    if (result.dismiss !== Swal.DismissReason){
                        if (result.value !== "") {
                            if (c.callback !== undefined){
                                c.callback(result);
                            }else{
                                c.callback(false);
                            }
                        }else{
                            c.callback(false);
                        }
                    }
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }

        }




    </script>

    {{block "js" .}}

    {{end}}


</body>

</html>


{{end}}